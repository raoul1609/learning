- le chapitre sur les methodes speciales avec python est tres interessant, je dois lire ce chapitre dans plusieurs sources (avec jason, avec xavki, doc officielle)
- je peux deja creer ma propre exception  -> application directe de la notion d'heritage

- est ce que le while remplace la recursion avec pyhton? ou dans l'Orientée Objet en general? ==> chacun est utile en fonction du contexte d'utilisation

NB : le polymorphisme en python se fait avec les methodes speciales, le principe du polymorphisme est d'avoir des fonctions qui ont comportements differents en fonctions
des entrees
avec les methodes speciales, il est possible redefinir le comportement des des operateurs


## Différence entre return et yield

return :
    Termine l'exécution de la fonction et renvoie une valeur.
    La fonction recommence depuis le début à chaque appel.

yield :
    Suspend l'exécution de la fonction et renvoie une valeur.
    La fonction reprend là où elle s'était arrêtée au prochain appel.


## En Python, plusieurs concepts et fonctionnalités s'apparentent à l'évaluation paresseuse (laziness) :

    - Générateurs et expressions génératrices.
    - Fonctions map, filter, zip.
    - Modules itertools et functools.
    - Lecture paresseuse de fichiers.
    - Propriétés paresseuses avec @property.
    - Bibliothèques tierces comme Pandas, Dask et PySpark.
    - Coroutines avec async/await.

Ces outils permettent de retarder les calculs ou le chargement de données jusqu'à ce qu'ils soient nécessaires, 
    ce qui améliore l'efficacité et réduit l'utilisation de la mémoire.


# TAF : 
    les interfaces en python ? pour implementer les interfaces, python fournit plusieurs outils : 
        - les classes abstraites (abc)
        - le duck typing et les protocoles ? utilite et avantages ?
        - 

    la programmation asysnchrone ?
    
    la composition sur les classes ? : lier deux classes avec un attribut,
        attribut est une instance d'autres classe.
        la classe Book a un attribut author qui est une instance de la classe Author, cela permet la separation, eviter un comportement 
            monolithe

        - la composition est souvent privilegie par rapport a l'heritage, car elle favorise le low coupling
        - on utilise l'heritage lorsque la relation est 'is-a' :'est un'
            exp : un chien est un animal, une voiture electrique est une voiture, ...
            il faut aussi noter que l'heritage cree une forte dependance entre les classes de bases
               et les classes derivees.

        - utiliser la composition quand la relation est 'has a' : 'a un'
            exp : une voiture a un moteur, un ordinateur a un processeur, un humain a un coeur, ...

    les methodes abstraites : methodes definies dans la classe mere, dont chaque classe doit l'implementer a sa facon 

    difference entre classe et dataclasses ??
        - les dataclasses automatiquent les methodes : __init__(), __repr__(), __eq__(), __lt__()
        - les classes sont plus flexibles car la logique d'instanciation est faite par nous meme